!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARROW_DOWN	includes/key_macos.h	26;"	d
ARROW_LEFT	includes/key_macos.h	27;"	d
ARROW_RIGHT	includes/key_macos.h	28;"	d
ARROW_UP	includes/key_macos.h	25;"	d
BACKGROUND	includes/color.h	18;"	d
BUFF_SIZE	libft/includes/get_next_line.h	17;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
COLOR_BRICK_RED	includes/color.h	22;"	d
COLOR_DISCO	includes/color.h	21;"	d
COLOR_FLAMINGO	includes/color.h	23;"	d
COLOR_H	includes/color.h	15;"	d
COLOR_JAFFA	includes/color.h	24;"	d
COLOR_SAFFRON	includes/color.h	25;"	d
ERROR_MESSAGE_H	includes/error_message.h	15;"	d
ERR_CAMERA_INIT	includes/error_message.h	23;"	d
ERR_CONV_TO_ARR	includes/error_message.h	22;"	d
ERR_FDF_INIT	includes/error_message.h	21;"	d
ERR_MAP	includes/error_message.h	18;"	d
ERR_MAP_INIT	includes/error_message.h	20;"	d
ERR_MAP_READING	includes/error_message.h	19;"	d
ERR_USAGE	includes/error_message.h	17;"	d
FDF_H	includes/fdf.h	15;"	d
FLAGS	Makefile	/^FLAGS = -Wall -Werror -Wextra -O3$/;"	m
FLAGS	libft/Makefile	/^FLAGS = -Wall -Werror -Wextra -O3 -c$/;"	m
FONT_HEIGHT	minilibx_macos/mlx_int.h	15;"	d
FONT_WIDTH	minilibx_macos/mlx_int.h	14;"	d
FT_ABS	libft/includes/libft.h	22;"	d
FT_INT_MAX	libft/includes/libft.h	29;"	d
FT_INT_MIN	libft/includes/libft.h	30;"	d
FT_LONG_MAX	libft/includes/libft.h	25;"	d
FT_LONG_MIN	libft/includes/libft.h	26;"	d
FT_MAX	libft/includes/libft.h	20;"	d
FT_MIN	libft/includes/libft.h	19;"	d
FT_UINT_MAX	libft/includes/libft.h	28;"	d
FT_ULONG_MAX	libft/includes/libft.h	24;"	d
GET_NEXT_LINE_H	libft/includes/get_next_line.h	15;"	d
GREEN	Makefile	/^GREEN = \\033[0;32m$/;"	m
GREEN	libft/Makefile	/^GREEN = \\033[0;32m$/;"	m
HEADERS	Makefile	/^HEADERS = $(addprefix $(HEADERS_DIRECTORY), $(HEADERS_LIST))$/;"	m
HEADERS	libft/Makefile	/^HEADERS = $(addprefix $(HEADERS_DIRECTORY), $(HEADERS_LIST))$/;"	m
HEADERS_DIRECTORY	Makefile	/^HEADERS_DIRECTORY = .\/includes\/$/;"	m
HEADERS_DIRECTORY	libft/Makefile	/^HEADERS_DIRECTORY = .\/includes\/$/;"	m
HEADERS_LIST	Makefile	/^HEADERS_LIST = fdf.h\\$/;"	m
HEADERS_LIST	libft/Makefile	/^HEADERS_LIST = libft.h\\$/;"	m
HEIGHT	includes/fdf.h	17;"	d
INCLUDES	Makefile	/^INCLUDES = -I$(HEADERS_DIRECTORY) -I$(LIBFT_HEADERS) -I$(MINILIBX_HEADERS)$/;"	m
INCLUDES	libft/Makefile	/^INCLUDES = -I$(HEADERS_DIRECTORY)$/;"	m
ISO	includes/fdf.h	/^	ISO,$/;"	e	enum:__anon2
KEY_MACOS_H	includes/key_macos.h	15;"	d
LIBFT	Makefile	/^LIBFT = $(LIBFT_DIRECTORY)libft.a$/;"	m
LIBFT_DIRECTORY	Makefile	/^LIBFT_DIRECTORY = .\/libft\/$/;"	m
LIBFT_H	libft/includes/libft.h	15;"	d
LIBFT_HEADERS	Makefile	/^LIBFT_HEADERS = $(LIBFT_DIRECTORY)includes\/$/;"	m
LIBRARIES	Makefile	/^LIBRARIES = -lmlx -lm -lft -L$(LIBFT_DIRECTORY) -L$(MINILIBX_DIRECTORY) -framework OpenGL -framework AppKit$/;"	m
MAIN_PAD_0	includes/key_macos.h	46;"	d
MAIN_PAD_1	includes/key_macos.h	47;"	d
MAIN_PAD_2	includes/key_macos.h	48;"	d
MAIN_PAD_3	includes/key_macos.h	49;"	d
MAIN_PAD_4	includes/key_macos.h	50;"	d
MAIN_PAD_5	includes/key_macos.h	51;"	d
MAIN_PAD_6	includes/key_macos.h	52;"	d
MAIN_PAD_7	includes/key_macos.h	53;"	d
MAIN_PAD_8	includes/key_macos.h	54;"	d
MAIN_PAD_9	includes/key_macos.h	55;"	d
MAIN_PAD_ESC	includes/key_macos.h	43;"	d
MAIN_PAD_I	includes/key_macos.h	44;"	d
MAIN_PAD_LESS	includes/key_macos.h	58;"	d
MAIN_PAD_MINUS	includes/key_macos.h	57;"	d
MAIN_PAD_MORE	includes/key_macos.h	59;"	d
MAIN_PAD_P	includes/key_macos.h	45;"	d
MAIN_PAD_PLUS	includes/key_macos.h	56;"	d
MAX_EVENT	minilibx_macos/mlx_int.h	10;"	d
MAX_PIXEL_NB	minilibx_macos/mlx_int.h	11;"	d
MENU_BACKGROUND	includes/color.h	19;"	d
MENU_WIDTH	includes/fdf.h	19;"	d
MINILIBX	Makefile	/^MINILIBX = $(MINILIBX_DIRECTORY)libmlx.a$/;"	m
MINILIBX_DIRECTORY	Makefile	/^MINILIBX_DIRECTORY = .\/minilibx_macos\/$/;"	m
MINILIBX_HEADERS	Makefile	/^MINILIBX_HEADERS = $(MINILIBX_DIRECTORY)$/;"	m
MLX_H	minilibx_macos/mlx.h	47;"	d
MOUSE_LEFT_BUTTON	includes/key_macos.h	17;"	d
MOUSE_RIGHT_BUTTON	includes/key_macos.h	18;"	d
MOUSE_SCROLL_DOWN	includes/key_macos.h	21;"	d
MOUSE_SCROLL_LEFT	includes/key_macos.h	22;"	d
MOUSE_SCROLL_RIGHT	includes/key_macos.h	23;"	d
MOUSE_SCROLL_UP	includes/key_macos.h	20;"	d
MOUSE_THIRD_BUTTON	includes/key_macos.h	19;"	d
NAME	Makefile	/^NAME = fdf$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NOM	minilibx_macos/Makefile	/^NOM=libmlx.a$/;"	m
NUM_PAD_0	includes/key_macos.h	30;"	d
NUM_PAD_1	includes/key_macos.h	31;"	d
NUM_PAD_2	includes/key_macos.h	32;"	d
NUM_PAD_3	includes/key_macos.h	33;"	d
NUM_PAD_4	includes/key_macos.h	34;"	d
NUM_PAD_5	includes/key_macos.h	35;"	d
NUM_PAD_6	includes/key_macos.h	36;"	d
NUM_PAD_7	includes/key_macos.h	37;"	d
NUM_PAD_8	includes/key_macos.h	38;"	d
NUM_PAD_9	includes/key_macos.h	39;"	d
NUM_PAD_MINUS	includes/key_macos.h	41;"	d
NUM_PAD_PLUS	includes/key_macos.h	40;"	d
OBJ	minilibx_macos/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	minilibx_macos/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJECTS	Makefile	/^OBJECTS	= $(addprefix $(OBJECTS_DIRECTORY), $(OBJECTS_LIST))$/;"	m
OBJECTS	libft/Makefile	/^OBJECTS	= $(addprefix $(OBJECTS_DIRECTORY), $(OBJECTS_LIST))$/;"	m
OBJECTS_DIRECTORY	Makefile	/^OBJECTS_DIRECTORY = objects\/$/;"	m
OBJECTS_DIRECTORY	libft/Makefile	/^OBJECTS_DIRECTORY = objects\/$/;"	m
OBJECTS_LIST	Makefile	/^OBJECTS_LIST = $(patsubst %.c, %.o, $(SOURCES_LIST))$/;"	m
OBJECTS_LIST	libft/Makefile	/^OBJECTS_LIST = $(patsubst %.c, %.o, $(SOURCES_LIST))$/;"	m
PARALLEL	includes/fdf.h	/^	PARALLEL$/;"	e	enum:__anon2
RED	Makefile	/^RED = \\033[0;31m$/;"	m
RED	libft/Makefile	/^RED = \\033[0;31m$/;"	m
RESET	Makefile	/^RESET = \\033[0m$/;"	m
RESET	libft/Makefile	/^RESET = \\033[0m$/;"	m
RETURN	minilibx_macos/mlx_xpm.c	30;"	d	file:
SOURCES	Makefile	/^SOURCES = $(addprefix $(SOURCES_DIRECTORY), $(SOURCES_LIST))$/;"	m
SOURCES	libft/Makefile	/^SOURCES = $(addprefix $(SOURCES_DIRECTORY), $(SOURCES_LIST))$/;"	m
SOURCES_DIRECTORY	Makefile	/^SOURCES_DIRECTORY = .\/sources\/$/;"	m
SOURCES_DIRECTORY	libft/Makefile	/^SOURCES_DIRECTORY = .\/sources\/$/;"	m
SOURCES_LIST	Makefile	/^SOURCES_LIST = main.c\\$/;"	m
SOURCES_LIST	libft/Makefile	/^SOURCES_LIST = ft_memset.c\\$/;"	m
SRC	minilibx_macos/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
TEXT_COLOR	includes/color.h	17;"	d
UNIQ_BPP	minilibx_macos/mlx_int.h	12;"	d
WIDTH	includes/fdf.h	18;"	d
alpha	includes/fdf.h	/^	double				alpha;$/;"	m	struct:s_camera
appid	minilibx_macos/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
beta	includes/fdf.h	/^	double				beta;$/;"	m	struct:s_camera
bits_per_pixel	includes/fdf.h	/^	int					bits_per_pixel;$/;"	m	struct:s_fdf
buffer	minilibx_macos/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
bytes_per_pixel	minilibx_macos/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon3	file:
camera	includes/fdf.h	/^	t_camera			*camera;$/;"	m	struct:s_fdf
camera_init	sources/init.c	/^t_camera	*camera_init(t_fdf *fdf)$/;"	f
change_projection	sources/controls_utils.c	/^void	change_projection(int key, t_fdf *fdf)$/;"	f
close	sources/controls.c	/^int		close(void *param)$/;"	f
col	minilibx_macos/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
color	includes/fdf.h	/^	int					color;$/;"	m	struct:s_coord_val
color	includes/fdf.h	/^	int					color;$/;"	m	struct:s_point
color	minilibx_macos/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
colors_arr	includes/fdf.h	/^	int					*colors_arr;$/;"	m	struct:s_map
content	libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libft/includes/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
coords_arr	includes/fdf.h	/^	int					*coords_arr;$/;"	m	struct:s_map
data_addr	includes/fdf.h	/^	char				*data_addr;$/;"	m	struct:s_fdf
display_log	minilibx_macos/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
draw	sources/draw.c	/^void		draw(t_map *map, t_fdf *fdf)$/;"	f
draw_background	sources/draw.c	/^static void	draw_background(t_fdf *fdf)$/;"	f	file:
draw_line	sources/draw.c	/^static void	draw_line(t_point f, t_point s, t_fdf *fdf)$/;"	f	file:
endian	includes/fdf.h	/^	int					endian;$/;"	m	struct:s_fdf
false	includes/fdf.h	/^	false,$/;"	e	enum:__anon1
fd	libft/includes/get_next_line.h	/^	int				fd;$/;"	m	struct:s_file
fdf_init	sources/init.c	/^t_fdf		*fdf_init(t_map *map)$/;"	f
flatten	sources/controls_utils.c	/^void	flatten(int key, t_fdf *fdf)$/;"	f
font	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	minilibx_macos/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon3	file:
font_fshader	minilibx_macos/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	minilibx_macos/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	minilibx_macos/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
free_strsplit_arr	sources/read_map.c	/^static void			free_strsplit_arr(char **arr)$/;"	f	file:
ft_atoi	libft/sources/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_atoi_base	sources/utils.c	/^int				ft_atoi_base(const char *str, int base)$/;"	f
ft_bzero	libft/sources/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_count_words	libft/sources/ft_strsplit.c	/^static size_t	ft_count_words(char const *s, char c)$/;"	f	file:
ft_del	libft/sources/ft_lstmap.c	/^static void	ft_del(void *content, size_t content_size)$/;"	f	file:
ft_free_words	libft/sources/ft_strsplit.c	/^static void		ft_free_words(char **words, size_t i)$/;"	f	file:
ft_get_word	libft/sources/ft_strsplit.c	/^static char		*ft_get_word(char *word, char c)$/;"	f	file:
ft_get_words	libft/sources/ft_strsplit.c	/^static char		**ft_get_words(char *s, char c, size_t words_count)$/;"	f	file:
ft_has_prefix	sources/utils.c	/^static t_bool	ft_has_prefix(const char *str, int base)$/;"	f	file:
ft_isalnum	libft/sources/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/sources/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/sources/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isblank	libft/sources/ft_isblank.c	/^int		ft_isblank(int c)$/;"	f
ft_isdigit	libft/sources/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isdigit_base	sources/utils.c	/^static int		ft_isdigit_base(char c, int base)$/;"	f	file:
ft_islower	libft/sources/ft_islower.c	/^int		ft_islower(int c)$/;"	f
ft_isnumber	sources/utils.c	/^t_bool			ft_isnumber(char *str, int base)$/;"	f
ft_isprint	libft/sources/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_isspace	libft/sources/ft_isspace.c	/^int		ft_isspace(int c)$/;"	f
ft_isupper	libft/sources/ft_isupper.c	/^int		ft_isupper(int c)$/;"	f
ft_itoa	libft/sources/ft_itoa.c	/^char			*ft_itoa(int n)$/;"	f
ft_lstadd	libft/sources/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstaddback	libft/sources/ft_lstaddback.c	/^void	ft_lstaddback(t_list **alst, t_list *new)$/;"	f
ft_lstdel	libft/sources/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libft/sources/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstiter	libft/sources/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libft/sources/ft_lstmap.c	/^t_list		*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/sources/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_memalloc	libft/sources/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/sources/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/sources/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/sources/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/sources/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libft/sources/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libft/sources/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/sources/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_numlen	libft/sources/ft_itoa.c	/^static int		ft_numlen(int n, int minus)$/;"	f	file:
ft_putchar	libft/sources/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/sources/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/sources/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/sources/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/sources/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft/sources/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/sources/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_fd	libft/sources/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_strcat	libft/sources/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strchr	libft/sources/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchrs	libft/sources/ft_strchrs.c	/^char	*ft_strchrs(const char *s, int c)$/;"	f
ft_strclr	libft/sources/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/sources/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/sources/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libft/sources/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/sources/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strequ	libft/sources/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft/sources/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libft/sources/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/sources/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/sources/ft_strlcat.c	/^size_t		ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/sources/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlwr	libft/sources/ft_strlwr.c	/^char	*ft_strlwr(char *s)$/;"	f
ft_strmap	libft/sources/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/sources/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/sources/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libft/sources/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/sources/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strndup	libft/sources/ft_strndup.c	/^char	*ft_strndup(const char *s1, size_t n)$/;"	f
ft_strnequ	libft/sources/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/sources/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnlen	libft/sources/ft_strnlen.c	/^size_t	ft_strnlen(const char *s, size_t maxlen)$/;"	f
ft_strnstr	libft/sources/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/sources/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/sources/ft_strrev.c	/^char	*ft_strrev(char *s)$/;"	f
ft_strsplit	libft/sources/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	libft/sources/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/sources/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strsubchr	libft/sources/ft_strsubchr.c	/^char	*ft_strsubchr(const char *s, char c)$/;"	f
ft_strtrim	libft/sources/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f
ft_strupr	libft/sources/ft_strupr.c	/^char	*ft_strupr(char *s)$/;"	f
ft_tolower	libft/sources/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/sources/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
func_t	minilibx_macos/mlx_int.h	/^typedef int (*func_t)();$/;"	t
gamma	includes/fdf.h	/^	double				gamma;$/;"	m	struct:s_camera
get_color	sources/color.c	/^int	get_color(t_point current, t_point start, t_point end, t_point delta)$/;"	f
get_default_color	sources/color.c	/^int	get_default_color(int z, t_map *map)$/;"	f
get_file	libft/sources/get_next_line.c	/^static t_file	*get_file(const int fd, t_file **head)$/;"	f	file:
get_index	sources/utils_2.c	/^int		get_index(int x, int y, int width)$/;"	f
get_light	sources/color.c	/^int	get_light(int start, int end, double percentage)$/;"	f
get_next_line	libft/sources/get_next_line.c	/^int				get_next_line(const int fd, char **line)$/;"	f
glsl_info_s	minilibx_macos/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	minilibx_macos/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
height	includes/fdf.h	/^	int					height;$/;"	m	struct:s_map
height	minilibx_macos/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon3	file:
height	minilibx_macos/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
image_fshader	minilibx_macos/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	minilibx_macos/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	minilibx_macos/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	includes/fdf.h	/^	void				*img;$/;"	m	struct:s_fdf
img	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img_list	minilibx_macos/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
is_pressed	includes/fdf.h	/^	char				is_pressed;$/;"	m	struct:s_mouse
iso	sources/project.c	/^static void	iso(int *x, int *y, int z)$/;"	f	file:
key_press	sources/keyboard_controls.c	/^int			key_press(int key, void *param)$/;"	f
loc_font_atlassize	minilibx_macos/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	minilibx_macos/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	minilibx_macos/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	minilibx_macos/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	minilibx_macos/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	minilibx_macos/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	minilibx_macos/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	minilibx_macos/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
loop_hook	minilibx_macos/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook_data	minilibx_macos/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_timer	minilibx_macos/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
main	sources/main.c	/^int		main(int argc, char **argv)$/;"	f
main_loop_active	minilibx_macos/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
map	includes/fdf.h	/^	t_map				*map;$/;"	m	struct:s_fdf
map_init	sources/init.c	/^t_map		*map_init(void)$/;"	f
mlx	includes/fdf.h	/^	void				*mlx;$/;"	m	struct:s_fdf
mlx_col_name	minilibx_macos/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_img_ctx_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	minilibx_macos/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	minilibx_macos/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_int_file_get_rid_comment	minilibx_macos/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	minilibx_macos/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_line	minilibx_macos/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	minilibx_macos/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_parse_xpm	minilibx_macos/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_static_line	minilibx_macos/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	minilibx_macos/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	minilibx_macos/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	minilibx_macos/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_xpm_set_pixel	minilibx_macos/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_ptr_s	minilibx_macos/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	minilibx_macos/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_shaders	minilibx_macos/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_win_list_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	minilibx_macos/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	minilibx_macos/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx_macos/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
mouse	includes/fdf.h	/^	t_mouse				*mouse;$/;"	m	struct:s_fdf
mouse_move	sources/mouse_controls.c	/^int			mouse_move(int x, int y, void *param)$/;"	f
mouse_press	sources/mouse_controls.c	/^int			mouse_press(int button, int x, int y, void *param)$/;"	f
mouse_release	sources/mouse_controls.c	/^int			mouse_release(int button, int x, int y, void *param)$/;"	f
move	sources/controls_utils.c	/^void	move(int key, t_fdf *fdf)$/;"	f
name	minilibx_macos/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	minilibx_macos/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	minilibx_macos/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
new_coord	sources/read_map.c	/^static t_coord_val	*new_coord(char *s)$/;"	f	file:
new_file	libft/sources/get_next_line.c	/^static t_file	*new_file(const int fd)$/;"	f	file:
new_point	sources/utils_2.c	/^t_point	new_point(int x, int y, t_map *map)$/;"	f
next	includes/fdf.h	/^	struct s_coord_val	*next;$/;"	m	struct:s_coord_val	typeref:struct:s_coord_val::s_coord_val
next	libft/includes/get_next_line.h	/^	struct s_file	*next;$/;"	m	struct:s_file	typeref:struct:s_file::s_file
next	libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	minilibx_macos/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	minilibx_macos/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	minilibx_macos/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
parse_line	sources/read_map.c	/^static void			parse_line(char **coords_line,$/;"	f	file:
percent	sources/utils_2.c	/^double	percent(int start, int end, int current)$/;"	f
pixel_data	minilibx_macos/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon3	file:
pixel_fshader	minilibx_macos/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	minilibx_macos/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	minilibx_macos/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	minilibx_macos/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
pop	sources/read_stack.c	/^t_coord_val	*pop(t_coord_val **coords_stack)$/;"	f
previous_x	includes/fdf.h	/^	int					previous_x;$/;"	m	struct:s_mouse
previous_y	includes/fdf.h	/^	int					previous_y;$/;"	m	struct:s_mouse
print_menu	sources/menu.c	/^void	print_menu(t_fdf *fdf)$/;"	f
project	sources/project.c	/^t_point		project(t_point p, t_fdf *fdf)$/;"	f
projection	includes/fdf.h	/^	t_projection		projection;$/;"	m	struct:s_camera
push	sources/read_stack.c	/^void		push(t_coord_val **coords_stack, t_coord_val *new)$/;"	f
put_pixel	sources/draw.c	/^static void	put_pixel(t_fdf *fdf, int x, int y, int color)$/;"	f	file:
read_map	sources/read_map.c	/^int					read_map(const int fd,$/;"	f
rotate	sources/controls_utils.c	/^void	rotate(int key, t_fdf *fdf)$/;"	f
rotate_x	sources/project.c	/^static void	rotate_x(int *y, int *z, double alpha)$/;"	f	file:
rotate_y	sources/project.c	/^static void	rotate_y(int *x, int *z, double beta)$/;"	f	file:
rotate_z	sources/project.c	/^static void	rotate_z(int *x, int *y, double gamma)$/;"	f	file:
s_camera	includes/fdf.h	/^typedef struct			s_camera$/;"	s
s_col_name	minilibx_macos/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_coord_val	includes/fdf.h	/^typedef struct			s_coord_val$/;"	s
s_fdf	includes/fdf.h	/^typedef struct			s_fdf$/;"	s
s_file	libft/includes/get_next_line.h	/^typedef struct		s_file$/;"	s
s_list	libft/includes/libft.h	/^typedef struct		s_list$/;"	s
s_map	includes/fdf.h	/^typedef struct			s_map$/;"	s
s_mouse	includes/fdf.h	/^typedef struct			s_mouse$/;"	s
s_point	includes/fdf.h	/^typedef struct			s_point$/;"	s
s_xpm_col	minilibx_macos/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
setup_controls	sources/controls.c	/^void	setup_controls(t_fdf *fdf)$/;"	f
size_line	includes/fdf.h	/^	int					size_line;$/;"	m	struct:s_fdf
stack_to_arrays	sources/convert.c	/^void		stack_to_arrays(t_coord_val **coords_stack, t_map *map)$/;"	f
str	libft/includes/get_next_line.h	/^	char			*str;$/;"	m	struct:s_file
str_divide	libft/sources/get_next_line.c	/^static int		str_divide(char **str, char **line)$/;"	f	file:
t_bool	includes/fdf.h	/^}	t_bool;$/;"	t	typeref:enum:__anon1
t_camera	includes/fdf.h	/^}						t_camera;$/;"	t	typeref:struct:s_camera
t_coord_val	includes/fdf.h	/^}						t_coord_val;$/;"	t	typeref:struct:s_coord_val
t_fdf	includes/fdf.h	/^}						t_fdf;$/;"	t	typeref:struct:s_fdf
t_file	libft/includes/get_next_line.h	/^}					t_file;$/;"	t	typeref:struct:s_file
t_list	libft/includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_map	includes/fdf.h	/^}						t_map;$/;"	t	typeref:struct:s_map
t_mouse	includes/fdf.h	/^}						t_mouse;$/;"	t	typeref:struct:s_mouse
t_point	includes/fdf.h	/^}						t_point;$/;"	t	typeref:struct:s_point
t_projection	includes/fdf.h	/^}	t_projection;$/;"	t	typeref:enum:__anon2
t_xpm_col	minilibx_macos/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
terminate	sources/utils_2.c	/^void	terminate(char *s)$/;"	f
texture	minilibx_macos/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
true	includes/fdf.h	/^	true$/;"	e	enum:__anon1
vbuffer	minilibx_macos/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vertexes	minilibx_macos/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
width	includes/fdf.h	/^	int					width;$/;"	m	struct:s_map
width	minilibx_macos/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon3	file:
width	minilibx_macos/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
win	includes/fdf.h	/^	void				*win;$/;"	m	struct:s_fdf
win_list	minilibx_macos/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
winid	minilibx_macos/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
x	includes/fdf.h	/^	int					x;$/;"	m	struct:s_mouse
x	includes/fdf.h	/^	int					x;$/;"	m	struct:s_point
x_offset	includes/fdf.h	/^	int					x_offset;$/;"	m	struct:s_camera
y	includes/fdf.h	/^	int					y;$/;"	m	struct:s_mouse
y	includes/fdf.h	/^	int					y;$/;"	m	struct:s_point
y_offset	includes/fdf.h	/^	int					y_offset;$/;"	m	struct:s_camera
z	includes/fdf.h	/^	int					z;$/;"	m	struct:s_coord_val
z	includes/fdf.h	/^	int					z;$/;"	m	struct:s_point
z_divisor	includes/fdf.h	/^	float				z_divisor;$/;"	m	struct:s_camera
z_max	includes/fdf.h	/^	int					z_max;$/;"	m	struct:s_map
z_min	includes/fdf.h	/^	int					z_min;$/;"	m	struct:s_map
z_range	includes/fdf.h	/^	int					z_range;$/;"	m	struct:s_map
zoom	includes/fdf.h	/^	int					zoom;$/;"	m	struct:s_camera
zoom	sources/controls_utils.c	/^void	zoom(int key, t_fdf *fdf)$/;"	f
